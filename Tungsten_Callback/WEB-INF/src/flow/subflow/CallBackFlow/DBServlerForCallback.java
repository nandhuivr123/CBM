package flow.subflow.CallBackFlow;

import java.sql.Timestamp;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.tungsten.all.App;
import com.tungsten.all.CallbackRequests;
import com.tungsten.all.Customer;
import com.tungsten.hibernaate.dao.Tungsten_DAO;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-JUL-06  12:28:56 PM
 */
public class DBServlerForCallback extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-JUL-06  12:28:56 PM
	 */
	public DBServlerForCallback() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-JUL-06  12:28:56 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		try {
			Tungsten_DAO app = new Tungsten_DAO();
			
			Timestamp currentTimestamp = new Timestamp(System.currentTimeMillis());
			@SuppressWarnings("deprecation")
			Timestamp timestamp1 = new Timestamp(121, 6, 18, 22, 05, 30, 0);
			String status = "pending";
			
			Customer cust = (Customer) mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CUSTOMER).getObjectValue();
			
			System.out.println("Object value :"+cust.toString());
			
			
			CallbackRequests callbackRequests=app.placeCallBackRequest(currentTimestamp, timestamp1, status, cust);
			
			if(callbackRequests==null) { 
				System.out.println("previous call is pending.. not taking up the request disconnect..." ); 
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"previous call is pending.. not taking up the request disconnect...", mySession);
				
			}
			else {
			System.out.println("customer is added from OD application..");
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"customer is added from OD application..", mySession);
			}

		}catch(Exception e) 
		{
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Exception in " +this.getName()+ e.getMessage());
		}

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-JUL-31  10:46:36 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("CallBackFlow-CallYouDuringWH", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
