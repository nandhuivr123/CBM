package flow;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.Collection;
import java.util.Date;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.tungsten.all.App;
import com.tungsten.all.Customer;
import com.tungsten.hibernaate.dao.Tungsten_DAO;

import connectivity.ws.operations.RestHTTPClient;




/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2023-JUL-06  11:29:30 AM
 */
public class CallinAPIForAgentAvailability extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-JUL-06  11:29:30 AM
	 */
	public CallinAPIForAgentAvailability() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2023-JUL-06  11:29:30 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		try {

			String ucid = mySession.getVariable(IProjectVariables.SESSION)
					.getComplexVariable().getField(
							IProjectVariables.SESSION_FIELD_UCID).getStringValue();
			String dnis = mySession.getVariable(IProjectVariables.SESSION)
					.getComplexVariable().getField(
							IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			String ani = mySession.getVariable(IProjectVariables.SESSION)
					.getComplexVariable().getField(
							IProjectVariables.SESSION_FIELD_ANI).getStringValue();


			String channel = mySession.getVariable(IProjectVariables.SESSION)
					.getComplexVariable().getField(
							IProjectVariables.SESSION_FIELD_CHANNEL).getStringValue();

			String sessionid = mySession.getVariable(IProjectVariables.SESSION)
					.getComplexVariable().getField(
							IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue();


			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "ucid :"+ucid+"DNIS :"+dnis+"ANI :"+ani+"channel :"+channel+"sessionid :"+sessionid, mySession);


			boolean agentAvailability=false;
			//Call Rest API to get Agent availability
			System.out.println("Calling CallingRestConnection");
			RestHTTPClient obj= new RestHTTPClient();
			//String url="https://mocki.io/v1/6c02f0f7-6709-4427-8530-2527a7e113c8";
			String url="http://headers.jsontest.com/";
			String object="Host";
			String skill="Host";
			JSONObject data_obj =obj.CallingRestConnection(url);

			String jsonString = (String) data_obj.get(skill);

			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Host value is"+jsonString, mySession);

			/*	JSONArray arr = (JSONArray) data_obj.get(skill);

			for (int i = 0; i < arr.size(); i++) {

				JSONObject new_obj = (JSONObject) arr.get(i);
				System.out.println("No of agent: " + new_obj.get("agent"));

				if(new_obj.get("skill").equals(skill)) {
					int noofagent=(int) new_obj.get("agent");
					if(noofagent>0) {
						System.out.println("agents are available in this skills..");
						agentAvailability=true;
					}
				}
			}*/

			mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_AGENT_AVAILABILITY).setValue(agentAvailability);

			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Max tries:"+mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_MAX_TRIES_FOR_CALLING_AGENT_AVAILABILITY_API).getIntValue(),mySession);

			System.out.println("Max tries:"+mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_MAX_TRIES_FOR_CALLING_AGENT_AVAILABILITY_API).getIntValue());
			int maxTries=mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_MAX_TRIES_FOR_CALLING_AGENT_AVAILABILITY_API).getIntValue();


			if(!agentAvailability) {
				if(maxTries>0) {
					maxTries=maxTries-1;
					mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_MAX_TRIES_FOR_CALLING_AGENT_AVAILABILITY_API).setValue(maxTries);
					System.out.println("Max tries after decrementing:"+mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_MAX_TRIES_FOR_CALLING_AGENT_AVAILABILITY_API).getIntValue());

					TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Max tries after decrementing:"+mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CALL_BACK_FIELD_MAX_TRIES_FOR_CALLING_AGENT_AVAILABILITY_API).getIntValue(),mySession);
					TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "There is no agent..", mySession);

					System.out.println("Start of delay: "+ new Date());
					TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Start of delay: "+ new Date(), mySession);

					Thread.sleep(10000);   
					System.out.println("End of delay: "+ new Date());
					TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"End of delay: "+ new Date(), mySession);
				}

			}

			Tungsten_DAO app = new Tungsten_DAO();
			Customer cust= app.addingCustomer("Krithika", dnis, "Krithika@gmail.com");
			System.out.println("customer is added from OD application..");
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"customer is added from OD application..", mySession);
			mySession.getVariableField(IProjectVariables.CALL_BACK, IProjectVariables.CUSTOMER).setValue(cust);
		
			
		}
	
		catch(Exception e) 
		{
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Exception in " +this.getName()+ e.getMessage());
		}

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2023-JUL-31  10:46:36 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("AgentAvailabilityCheck", 0, true, "Default");
		list.add(aGoto);

		return list;
	}

}